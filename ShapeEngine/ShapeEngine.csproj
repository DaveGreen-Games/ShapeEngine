<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
	<AllowUnsafeBlocks>true</AllowUnsafeBlocks>
	<RunWorkingDirectory>$(MSBuildThisFileDirectory)</RunWorkingDirectory>
	<ApplicationIcon>shape-engine.ico</ApplicationIcon>
	<Title>Shape Engine</Title>
	<Authors>Dave Green</Authors>
	<RepositoryUrl>https://github.com/DaveGreen-Games/ShapeEngine</RepositoryUrl>
	<Version>3.1.0</Version>
	<Description>My custom made 2d game engine based on the great Raylib Framework. Main focus is being performant and only using draw functions instead of textures. Custom input, audio, savegame, collision, shape, pathfinding, ui, camera, color palette, polygon fracturing, and text system are available with a few other nice things!</Description>
	<PackageProjectUrl>https://davegreengames.itch.io/shape-engine</PackageProjectUrl>
	<PackageIcon>shapeengine-nuget-icon-128px.png</PackageIcon>
	<RepositoryType>git</RepositoryType>
	<PackageTags>GameEngine Framework 2D raylib gamedev graphics shapes polygon rect line clipper2 polygonclipping</PackageTags>
	<Company>Dave Green Games</Company>
	<Product>Shape Engine</Product>
	<AssemblyVersion>3.1.0</AssemblyVersion>
	<FileVersion>3.1.0</FileVersion>
  	<PackageReadmeFile>readme-nuget.md</PackageReadmeFile>
  	<NeutralLanguage>en-US</NeutralLanguage>
  	<Copyright>Copyright (c) David Grueneis 2024</Copyright>
  	<PackageRequireLicenseAcceptance>true</PackageRequireLicenseAcceptance>
  	<PackageReleaseNotes>
		# 3.1 Release
		This release addresses various fixes and improvements that were missed in the 3.0 release. 
		Despite introducing some breaking changes, I decided to classify this as a minor release rather than version 4.0, as all the breaking changes pertain to the same systems as the 3.0 release.

		## FirstContact / ContactEnded System Overhaul:
		- Previously, the FirstContact was only reported for Colliders and not for CollisionObjects. The system has now been split into two separate systems: one for Collider pairs and one for CollisionObject pairs.
		- CollisionObjects:
		  + A FirstContact between two CollisionObjects is reported once any Collider of one contacts any Collider of the other CollisionObject.
		  + The ContactEnded() function for the CollisionObject is called once all contacts between all of the Colliders have ended.
		- Colliders:
		  + A FirstContact between two Colliders is reported the first time they contact (no contact in the previous frame).
		  + The ColliderContactEnded() function is called once the contact ends (contact in the previous frame but no contact in the current frame).

		## Other Changes:
		- Namespace Changes:
		  + CollisionObject moved to the CollisionSystem namespace.
		- Class Removals:
		  + ContactEndedInformation class removed.
		  + Contact class removed.
		- Function Parameter Changes:
		  + ContactEnded(CollisionObject other) function parameters changed.
		  + ColliderContactEnded(Collider self, Collider other) function parameters changed.
		- CollisionInformation Improvements:
		  + CollisionInformation now includes a FirstContact member, reported only for the two involved CollisionObjects, separate from any FirstContact reporting between Colliders.
		  + General improvements and cleanup of CollisionInformation, including new functions.
		  + New functions for Exists, Find, and FindAll CollisionPoints.
		  + New functions for finding Closest, Furthest, and Combined CollisionPoint.
		- Collision Improvements:
		  + Functions for Exists, Find, and FindAll CollisionPoints added.
		- CollisionPoints:
		  + GetClosest/Furthest/FacingTowards functions now skip invalid collision points
		- Renaming:
		  + GetAverageCollisionPoint() renamed to GetCombinedCollisionPoint() in multiple classes.
		- ResolveCollision Update:
		  + CollisionObject.ResolveCollision() is now called for each generated CollisionInformation instead of receiving a list of CollisionInformation.
		
		# 3.0 Release
		This release improves the way collision/overlap/query information is aggregated and handled.
		Before information was collected on a per collider basis and events/functions would be called on the active involved collider. This meant the actual collision object and parent of the colliders would not get notified.
		
		Now all the information is grouped together per collision object. The collision/overlap between colliders with all the collision points is still collected together in one class. So each collision object gets notified of all the collisions/overlaps that happend with any of the child colliders at the end of each frame. A collision without collision points is an overlap!
		
		These changes should help in making it easier to use the collision information. The actual collision detection and data has not changed just how it is grouped together and presented to the involved collision objects/ colliders.

		- Overlap and OverlapInformation classes added
		- CollisionInformation class reworked
		- Collision class improvements
		- CollisionSystem overhaul:
		- CollisionObjects now receive relevant CollisionInformation and can choose to pass it down to involved colliders
		- Collision information is now collected / sorted based on the other involved collision object. This means a collision is now detected and reported for all involved colliders in a collision between 2 collision objects at once.
		- Functions/ Events involved renamed and reworked to make the system clearer
		- Collision Namespace changed to CollisionSystem
		- RangeInt/ RangeFloat classes removed
		- EffectObject, Effect, Particle classes removed
		- Copy() Function added to CollisionInformation, OverlapInformation, Collision, Overlap, and Intersection classes
		- Filter functions added to CollisionInformation and OverlapInformation
		- Intersection class deleted (replaced by CollisionPoints class)
		- CollisionPoint IsFacing*() functions added to check if normals are facing the correct way
		- QuerySpace* functions in CollisionHandler renamed to IntersectSpace*
		- IntersectSpace* functions now return IntersectSpaceResults that replaced the old QueryInfo system.
		- CastSpace now uses CastSpaceResult/CastSpaceEntry classes
		- Direction ToAlignement() Function fixed and ToInvertedAlignement() Function added
		- Deprecated classes removed:
			- Particle
			- PhysicsParticle
			- RangeFloat
			- RangeInt
			- SavegameFolder
		
	</PackageReleaseNotes>
  	<PackageId>DaveGreen.ShapeEngine</PackageId>
  	<LangVersion>latestmajor</LangVersion>
  </PropertyGroup>


	<ItemGroup>
		<None Include="readme-nuget.md" Pack="true" PackagePath="\"/>
	</ItemGroup>
	
  <ItemGroup>
    <Content Include="shape-engine.ico" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Clipper2" Version="1.4.0" />
    <PackageReference Include="Raylib-cs" Version="7.0.1" />
  </ItemGroup>

	<ItemGroup>
		<None Include="shapeengine-nuget-icon-128px.png" Pack="true" Visible="false" PackagePath="shapeengine-nuget-icon-128px.png" />
	</ItemGroup>

	<PropertyGroup>
		<PackageLicenseFile>LICENSE.txt</PackageLicenseFile>
	</PropertyGroup>

	<ItemGroup>
		<None Include="LICENSE.txt" Pack="true" PackagePath=""/>
	</ItemGroup>

	<ItemGroup>
	  <Folder Include="Deprecated\" />
	</ItemGroup>

</Project>
